{"ast":null,"code":"var _jsxFileName = \"/home/facundo/code/reddit/web/src/pages/_app.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { ThemeProvider, CSSReset, ColorModeProvider } from '@chakra-ui/core';\nimport { Provider, createClient, dedupExchange, fetchExchange } from 'urql';\nimport { cacheExchange } from '@urql/exchange-graphcache';\nimport theme from '../theme';\nimport { MeDocument } from '../generated/graphql';\n\nfunction betterUpdateQuery(cache, qi, result, fn) {\n  return cache.updateQuery(qi, data => fn(result, data));\n}\n\nconst client = createClient({\n  url: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: 'include'\n  },\n  exchanges: [dedupExchange, cacheExchange({\n    updates: {\n      Mutation: {\n        login: (result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, result, (result, query) => {\n            if (result.login.errors) {\n              return query;\n            } else {\n              return {\n                me: result.login.user\n              };\n            }\n          });\n        }\n      }\n    }\n  }), fetchExchange]\n});\n\nfunction MyApp({\n  Component,\n  pageProps\n}) {\n  return __jsx(Provider, {\n    value: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, __jsx(ThemeProvider, {\n    theme: theme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, __jsx(ColorModeProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, __jsx(CSSReset, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }), __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  })))));\n}\n\nexport default MyApp;","map":{"version":3,"sources":["/home/facundo/code/reddit/web/src/pages/_app.tsx"],"names":["ThemeProvider","CSSReset","ColorModeProvider","Provider","createClient","dedupExchange","fetchExchange","cacheExchange","theme","MeDocument","betterUpdateQuery","cache","qi","result","fn","updateQuery","data","client","url","fetchOptions","credentials","exchanges","updates","Mutation","login","args","info","query","errors","me","user","MyApp","Component","pageProps"],"mappings":";;;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,iBAAlC,QAA2D,iBAA3D;AACA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,aAAjC,EAAgDC,aAAhD,QAAqE,MAArE;AACA,SACEC,aADF,QAKO,2BALP;AAMA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,UAAT,QAAmD,sBAAnD;;AAEA,SAASC,iBAAT,CACEC,KADF,EAEEC,EAFF,EAGEC,MAHF,EAIEC,EAJF,EAKE;AACA,SAAOH,KAAK,CAACI,WAAN,CAAkBH,EAAlB,EAAuBI,IAAD,IAAUF,EAAE,CAACD,MAAD,EAASG,IAAT,CAAlC,CAAP;AACD;;AAED,MAAMC,MAAM,GAAGb,YAAY,CAAC;AAC1Bc,EAAAA,GAAG,EAAE,+BADqB;AAE1BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,WAAW,EAAE;AADD,GAFY;AAK1BC,EAAAA,SAAS,EAAE,CACThB,aADS,EAETE,aAAa,CAAC;AACZe,IAAAA,OAAO,EAAE;AACPC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,KAAK,EAAE,CAACX,MAAD,EAASY,IAAT,EAAed,KAAf,EAAsBe,IAAtB,KAA+B;AACpChB,UAAAA,iBAAiB,CACfC,KADe,EAEf;AAAEgB,YAAAA,KAAK,EAAElB;AAAT,WAFe,EAGfI,MAHe,EAIf,CAACA,MAAD,EAASc,KAAT,KAAmB;AACjB,gBAAId,MAAM,CAACW,KAAP,CAAaI,MAAjB,EAAyB;AACvB,qBAAOD,KAAP;AACD,aAFD,MAEO;AACL,qBAAO;AACLE,gBAAAA,EAAE,EAAEhB,MAAM,CAACW,KAAP,CAAaM;AADZ,eAAP;AAGD;AACF,WAZc,CAAjB;AAcD;AAhBO;AADH;AADG,GAAD,CAFJ,EAwBTxB,aAxBS;AALe,CAAD,CAA3B;;AAiCA,SAASyB,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAf,EAA8C;AAC5C,SACE,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEhB,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,aAAD;AAAe,IAAA,KAAK,EAAET,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,SAAD,eAAeyB,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,CADF,CADF,CADF;AAUD;;AAED,eAAeF,KAAf","sourcesContent":["import { ThemeProvider, CSSReset, ColorModeProvider } from '@chakra-ui/core';\nimport { Provider, createClient, dedupExchange, fetchExchange } from 'urql';\nimport {\n  cacheExchange,\n  Cache,\n  QueryInput,\n  query,\n} from '@urql/exchange-graphcache';\nimport theme from '../theme';\nimport { MeDocument, MeQuery, LoginMutation } from '../generated/graphql';\n\nfunction betterUpdateQuery<Result, Query>(\n  cache: Cache,\n  qi: QueryInput,\n  result: any,\n  fn: (r: Result, q: Query) => Query\n) {\n  return cache.updateQuery(qi, (data) => fn(result, data as any) as any);\n}\n\nconst client = createClient({\n  url: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: 'include',\n  },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      updates: {\n        Mutation: {\n          login: (result, args, cache, info) => {\n            betterUpdateQuery<LoginMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              result,\n              (result, query) => {\n                if (result.login.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.login.user,\n                  };\n                }\n              }\n            );\n          },\n        },\n      },\n    }),\n    fetchExchange,\n  ],\n});\n\nfunction MyApp({ Component, pageProps }: any) {\n  return (\n    <Provider value={client}>\n      <ThemeProvider theme={theme}>\n        <ColorModeProvider>\n          <CSSReset />\n          <Component {...pageProps} />\n        </ColorModeProvider>\n      </ThemeProvider>\n    </Provider>\n  );\n}\n\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}