{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/esm/objectDestructuringEmpty\";\n\nvar _this = this,\n    _jsxFileName = \"/home/facundo/code/reddit/web/src/pages/post/[id].tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { withUrqlClient } from 'next-urql';\nimport { createUrqlClient } from '../../utils/createUrqlClient';\nimport { useRouter } from 'next/router';\nimport { usePostQuery } from '../../generated/graphql';\nimport { Layout } from '../../components/Layout';\nimport { Heading, Box } from '@chakra-ui/core';\n\nvar Post = function Post(_ref) {\n  _s();\n\n  var _data$post, _data$post2;\n\n  _objectDestructuringEmpty(_ref);\n\n  var router = useRouter();\n  var intId = typeof router.query.id === 'string' ? parseInt(router.query.id) : -1;\n\n  var _usePostQuery = usePostQuery({\n    pause: intId === -1,\n    variables: {\n      id: intId\n    }\n  }),\n      _usePostQuery2 = _slicedToArray(_usePostQuery, 1),\n      _usePostQuery2$ = _usePostQuery2[0],\n      data = _usePostQuery2$.data,\n      error = _usePostQuery2$.error,\n      fetching = _usePostQuery2$.fetching;\n\n  if (fetching) {\n    return __jsx(Layout, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }\n    }, \"Loading...\"));\n  }\n\n  if (!(data === null || data === void 0 ? void 0 : data.post)) {\n    return __jsx(Layout, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }\n    }, __jsx(Box, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }, \"could not find post\"));\n  }\n\n  if (error) {\n    return __jsx(Layout, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    }, \"error.message\"));\n  }\n\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, __jsx(Heading, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, data === null || data === void 0 ? void 0 : (_data$post = data.post) === null || _data$post === void 0 ? void 0 : _data$post.title), data === null || data === void 0 ? void 0 : (_data$post2 = data.post) === null || _data$post2 === void 0 ? void 0 : _data$post2.text);\n};\n\n_s(Post, \"UkAa9MQJsIOaIVx23Rpsi3Q7Hi8=\", false, function () {\n  return [useRouter, usePostQuery];\n});\n\n_c = Post;\nexport default withUrqlClient(createUrqlClient, {\n  ssr: true\n})(Post);\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/home/facundo/code/reddit/web/src/pages/post/[id].tsx"],"names":["React","withUrqlClient","createUrqlClient","useRouter","usePostQuery","Layout","Heading","Box","Post","router","intId","query","id","parseInt","pause","variables","data","error","fetching","post","title","text","ssr"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,MAAT,QAAuB,yBAAvB;AACA,SAASC,OAAT,EAAkBC,GAAlB,QAA6B,iBAA7B;;AAEA,IAAMC,IAAkB,GAAG,SAArBA,IAAqB,OAAQ;AAAA;;AAAA;;AAAA;;AACjC,MAAMC,MAAM,GAAGN,SAAS,EAAxB;AACA,MAAMO,KAAK,GACT,OAAOD,MAAM,CAACE,KAAP,CAAaC,EAApB,KAA2B,QAA3B,GAAsCC,QAAQ,CAACJ,MAAM,CAACE,KAAP,CAAaC,EAAd,CAA9C,GAAkE,CAAC,CADrE;;AAFiC,sBAKGR,YAAY,CAAC;AAC/CU,IAAAA,KAAK,EAAEJ,KAAK,KAAK,CAAC,CAD6B;AAE/CK,IAAAA,SAAS,EAAE;AACTH,MAAAA,EAAE,EAAEF;AADK;AAFoC,GAAD,CALf;AAAA;AAAA;AAAA,MAKxBM,IALwB,mBAKxBA,IALwB;AAAA,MAKlBC,KALkB,mBAKlBA,KALkB;AAAA,MAKXC,QALW,mBAKXA,QALW;;AAYjC,MAAIA,QAAJ,EAAc;AACZ,WACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CADF;AAKD;;AAED,MAAI,EAACF,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEG,IAAP,CAAJ,EAAiB;AACf,WACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,CADF;AAKD;;AAED,MAAIF,KAAJ,EAAW;AACT,WACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,CADF;AAKD;;AAED,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAUD,IAAV,aAAUA,IAAV,qCAAUA,IAAI,CAAEG,IAAhB,+CAAU,WAAYC,KAAtB,CADF,EAEGJ,IAFH,aAEGA,IAFH,sCAEGA,IAAI,CAAEG,IAFT,gDAEG,YAAYE,IAFf,CADF;AAMD,CA1CD;;GAAMb,I;UACWL,S,EAIqBC,Y;;;KALhCI,I;AA4CN,eAAeP,cAAc,CAACC,gBAAD,EAAmB;AAAEoB,EAAAA,GAAG,EAAE;AAAP,CAAnB,CAAd,CAAgDd,IAAhD,CAAf","sourcesContent":["import React from 'react';\nimport { withUrqlClient } from 'next-urql';\nimport { createUrqlClient } from '../../utils/createUrqlClient';\nimport { useRouter } from 'next/router';\nimport { usePostQuery } from '../../generated/graphql';\nimport { Layout } from '../../components/Layout';\nimport { Heading, Box } from '@chakra-ui/core';\n\nconst Post: React.FC<{}> = ({}) => {\n  const router = useRouter();\n  const intId =\n    typeof router.query.id === 'string' ? parseInt(router.query.id) : -1;\n\n  const [{ data, error, fetching }] = usePostQuery({\n    pause: intId === -1,\n    variables: {\n      id: intId,\n    },\n  });\n\n  if (fetching) {\n    return (\n      <Layout>\n        <div>Loading...</div>\n      </Layout>\n    );\n  }\n\n  if (!data?.post) {\n    return (\n      <Layout>\n        <Box>could not find post</Box>\n      </Layout>\n    );\n  }\n\n  if (error) {\n    return (\n      <Layout>\n        <div>error.message</div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout>\n      <Heading>{data?.post?.title}</Heading>\n      {data?.post?.text}\n    </Layout>\n  );\n};\n\nexport default withUrqlClient(createUrqlClient, { ssr: true })(Post);\n"]},"metadata":{},"sourceType":"module"}