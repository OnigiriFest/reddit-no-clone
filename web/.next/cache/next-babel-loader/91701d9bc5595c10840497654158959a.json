{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/facundo/code/reddit-web/src/components/InputField.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { FormControl, FormLabel, Input, FormErrorMessage } from '@chakra-ui/core';\nimport { useField } from 'formik';\nexport var InputField = function InputField(props) {\n  _s();\n\n  var _useField = useField(props),\n      _useField2 = _slicedToArray(_useField, 2),\n      field = _useField2[0],\n      error = _useField2[1].error;\n\n  console.log(field);\n  return __jsx(FormControl, {\n    isInvalid: !!error,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: field.name,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, props.label), __jsx(Input, _extends({}, field, {\n    id: field.name,\n    placeholder: props.placeholder,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  })), error ? __jsx(FormErrorMessage, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 16\n    }\n  }, error) : null);\n};\n\n_s(InputField, \"DpPuTb9nPdu6NyyZR63Xu5KSrwc=\", false, function () {\n  return [useField];\n});\n\n_c = InputField;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputField\");","map":{"version":3,"sources":["/home/facundo/code/reddit-web/src/components/InputField.tsx"],"names":["React","FormControl","FormLabel","Input","FormErrorMessage","useField","InputField","props","field","error","console","log","name","label","placeholder"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAA2C,OAA3C;AACA,SACEC,WADF,EAEEC,SAFF,EAGEC,KAHF,EAIEC,gBAJF,QAKO,iBALP;AAMA,SAASC,QAAT,QAAyB,QAAzB;AAQA,OAAO,IAAMC,UAAqC,GAAG,SAAxCA,UAAwC,CAACC,KAAD,EAAW;AAAA;;AAAA,kBACnCF,QAAQ,CAACE,KAAD,CAD2B;AAAA;AAAA,MACvDC,KADuD;AAAA,MAC9CC,KAD8C,iBAC9CA,KAD8C;;AAE9DC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,SACE,MAAC,WAAD;AAAa,IAAA,SAAS,EAAE,CAAC,CAACC,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAW,IAAA,OAAO,EAAED,KAAK,CAACI,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCL,KAAK,CAACM,KAAvC,CADF,EAEE,MAAC,KAAD,eAAWL,KAAX;AAAkB,IAAA,EAAE,EAAEA,KAAK,CAACI,IAA5B;AAAkC,IAAA,WAAW,EAAEL,KAAK,CAACO,WAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,EAGGL,KAAK,GAAG,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmBA,KAAnB,CAAH,GAAkD,IAH1D,CADF;AAOD,CAVM;;GAAMH,U;UACgBD,Q;;;KADhBC,U","sourcesContent":["import React, { InputHTMLAttributes } from 'react';\nimport {\n  FormControl,\n  FormLabel,\n  Input,\n  FormErrorMessage,\n} from '@chakra-ui/core';\nimport { useField } from 'formik';\n\ntype InputFieldProps = InputHTMLAttributes<HTMLInputElement> & {\n  name: string;\n  label: string;\n  placeholder: string;\n};\n\nexport const InputField: React.FC<InputFieldProps> = (props) => {\n  const [field, { error }] = useField(props);\n  console.log(field);\n  return (\n    <FormControl isInvalid={!!error}>\n      <FormLabel htmlFor={field.name}>{props.label}</FormLabel>\n      <Input {...field} id={field.name} placeholder={props.placeholder} />\n      {error ? <FormErrorMessage>{error}</FormErrorMessage> : null}\n    </FormControl>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}