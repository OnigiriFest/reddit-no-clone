{"ast":null,"code":"import { dedupExchange, fetchExchange, stringifyVariables } from 'urql';\nimport { cacheExchange } from '@urql/exchange-graphcache';\nimport { pipe, tap } from 'wonka';\nimport { MeDocument } from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery';\nimport Router from 'next/router';\nimport gql from 'graphql-tag';\n\nconst errorExchange = ({\n  forward\n}) => ops$ => {\n  return pipe(forward(ops$), tap(({\n    error\n  }) => {\n    if (error === null || error === void 0 ? void 0 : error.message.includes('not authenticated')) {\n      Router.replace('/login');\n    }\n  }));\n};\n\nexport const cursorPagination = () => {\n  return (_parent, fieldArgs, cache, info) => {\n    const {\n      parentKey: entityKey,\n      fieldName\n    } = info;\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter(info => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n\n    if (size === 0) {\n      return undefined;\n    }\n\n    const fieldKey = `${fieldName}(${stringifyVariables(fieldArgs)})`;\n    const isItInTheCache = cache.resolve(cache.resolveFieldByKey(entityKey, fieldKey), 'posts');\n    info.partial = !isItInTheCache;\n    let hasMore = true;\n    const results = [];\n    fieldInfos.forEach(fi => {\n      const key = cache.resolveFieldByKey(entityKey, fi.fieldKey);\n      const data = cache.resolve(key, 'posts');\n\n      const _hasMore = cache.resolve(key, 'hasMore');\n\n      if (!_hasMore) {\n        hasMore = _hasMore;\n      }\n\n      results.push(...data);\n    });\n    return {\n      __typename: 'PaginatedPosts',\n      hasMore,\n      posts: results\n    };\n  };\n};\nexport const createUrqlClient = ssrExchange => ({\n  url: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: 'include'\n  },\n  exchanges: [dedupExchange, cacheExchange({\n    keys: {\n      PaginatedPosts: () => null\n    },\n    resolvers: {\n      Query: {\n        posts: cursorPagination()\n      }\n    },\n    updates: {\n      Mutation: {\n        vote: (_result, args, cache, info) => {\n          const {\n            postId,\n            value\n          } = args;\n          const data = cache.readFragment(gql`\n                fargment _ on Post {\n                  id\n                  points\n                }\n              `, {\n            id: postId\n          });\n        },\n        createPost: (_result, args, cache, info) => {\n          const allFields = cache.inspectFields('Query');\n          const fieldInfos = allFields.filter(info => info.fieldName === 'posts');\n          fieldInfos.forEach(fi => {\n            cache.invalidate('Query', 'posts', fi.arguments || {});\n          });\n        },\n        login: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, (result, query) => {\n            if (result.login.errors) {\n              return query;\n            } else {\n              return {\n                me: result.login.user\n              };\n            }\n          });\n        },\n        register: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, (result, query) => {\n            if (result.register.errors) {\n              return query;\n            } else {\n              return {\n                me: result.register.user\n              };\n            }\n          });\n        },\n        logout: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, () => ({\n            me: null\n          }));\n        }\n      }\n    }\n  }), errorExchange, ssrExchange, fetchExchange]\n});","map":{"version":3,"sources":["/home/facundo/code/reddit/web/src/utils/createUrqlClient.ts"],"names":["dedupExchange","fetchExchange","stringifyVariables","cacheExchange","pipe","tap","MeDocument","betterUpdateQuery","Router","gql","errorExchange","forward","ops$","error","message","includes","replace","cursorPagination","_parent","fieldArgs","cache","info","parentKey","entityKey","fieldName","allFields","inspectFields","fieldInfos","filter","size","length","undefined","fieldKey","isItInTheCache","resolve","resolveFieldByKey","partial","hasMore","results","forEach","fi","key","data","_hasMore","push","__typename","posts","createUrqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","keys","PaginatedPosts","resolvers","Query","updates","Mutation","vote","_result","args","postId","value","readFragment","id","createPost","invalidate","arguments","login","query","result","errors","me","user","register","logout"],"mappings":"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","sourcesContent":["import {\n  dedupExchange,\n  fetchExchange,\n  Exchange,\n  stringifyVariables,\n} from 'urql';\nimport { cacheExchange, Resolver } from '@urql/exchange-graphcache';\nimport { pipe, tap } from 'wonka';\nimport {\n  LoginMutation,\n  MeQuery,\n  MeDocument,\n  RegisterMutation,\n  VoteMutationVariables,\n} from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery';\nimport Router from 'next/router';\nimport { fieldInfoOfKey } from '@urql/exchange-graphcache/dist/types/store';\nimport gql from 'graphql-tag';\n\nconst errorExchange: Exchange = ({ forward }) => (ops$) => {\n  return pipe(\n    forward(ops$),\n    tap(({ error }) => {\n      if (error?.message.includes('not authenticated')) {\n        Router.replace('/login');\n      }\n    })\n  );\n};\n\nexport interface PaginationParams {\n  offsetArgument?: string;\n  limitArgument?: string;\n}\n\nexport const cursorPagination = (): Resolver => {\n  return (_parent, fieldArgs, cache, info) => {\n    const { parentKey: entityKey, fieldName } = info;\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter((info) => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n    if (size === 0) {\n      return undefined;\n    }\n\n    const fieldKey = `${fieldName}(${stringifyVariables(fieldArgs)})`;\n    const isItInTheCache = cache.resolve(\n      cache.resolveFieldByKey(entityKey, fieldKey) as string,\n      'posts'\n    );\n\n    info.partial = !isItInTheCache;\n    let hasMore = true;\n\n    const results: string[] = [];\n    fieldInfos.forEach((fi) => {\n      const key = cache.resolveFieldByKey(entityKey, fi.fieldKey) as string;\n      const data = cache.resolve(key, 'posts') as string[];\n      const _hasMore = cache.resolve(key, 'hasMore');\n\n      if (!_hasMore) {\n        hasMore = _hasMore as boolean;\n      }\n\n      results.push(...data);\n    });\n\n    return {\n      __typename: 'PaginatedPosts',\n      hasMore,\n      posts: results,\n    };\n  };\n};\n\nexport const createUrqlClient = (ssrExchange: any) => ({\n  url: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: 'include' as const,\n  },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      keys: {\n        PaginatedPosts: () => null,\n      },\n      resolvers: {\n        Query: {\n          posts: cursorPagination(),\n        },\n      },\n      updates: {\n        Mutation: {\n          vote: (_result, args, cache, info) => {\n            const { postId, value } = args as VoteMutationVariables;\n            const data = cache.readFragment(\n              gql`\n                fargment _ on Post {\n                  id\n                  points\n                }\n              `,\n              { id: postId }\n            );\n          },\n          createPost: (_result, args, cache, info) => {\n            const allFields = cache.inspectFields('Query');\n            const fieldInfos = allFields.filter(\n              (info) => info.fieldName === 'posts'\n            );\n            fieldInfos.forEach((fi) => {\n              cache.invalidate('Query', 'posts', fi.arguments || {});\n            });\n          },\n          login: (_result, args, cache, info) => {\n            betterUpdateQuery<LoginMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              (result, query) => {\n                if (result.login.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.login.user,\n                  };\n                }\n              }\n            );\n          },\n          register: (_result, args, cache, info) => {\n            betterUpdateQuery<RegisterMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              (result, query) => {\n                if (result.register.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.register.user,\n                  };\n                }\n              }\n            );\n          },\n          logout: (_result, args, cache, info) => {\n            betterUpdateQuery<LoginMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              () => ({ me: null })\n            );\n          },\n        },\n      },\n    }),\n    errorExchange,\n    ssrExchange,\n    fetchExchange,\n  ],\n});\n"]},"metadata":{},"sourceType":"module"}