{"ast":null,"code":"import { dedupExchange, fetchExchange } from 'urql';\nimport { cacheExchange } from '@urql/exchange-graphcache';\nimport { pipe, tap } from 'wonka';\nimport { MeDocument } from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery';\nimport Router from 'next/router';\n\nvar errorExchange = function errorExchange(_ref) {\n  var forward = _ref.forward;\n  return function (ops$) {\n    return pipe(forward(ops$), tap(function (_ref2) {\n      var error = _ref2.error;\n\n      if (error === null || error === void 0 ? void 0 : error.message.includes('not authenticated')) {\n        Router.replace('/login');\n      }\n    }));\n  };\n};\n\nexport var createUrqlClient = function createUrqlClient(ssrExchange) {\n  return {\n    url: 'http://localhost:4000/graphql',\n    fetchOptions: {\n      credentials: 'include'\n    },\n    exchanges: [dedupExchange, cacheExchange({\n      updates: {\n        Mutation: {\n          login: function login(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function (result, query) {\n              if (result.login.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.login.user\n                };\n              }\n            });\n          },\n          register: function register(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function (result, query) {\n              if (result.register.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.register.user\n                };\n              }\n            });\n          },\n          logout: function logout(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function () {\n              return {\n                me: null\n              };\n            });\n          }\n        }\n      }\n    }), errorExchange, ssrExchange, fetchExchange]\n  };\n};","map":{"version":3,"sources":["/home/facundo/code/reddit/web/src/utils/createUrqlClient.ts"],"names":["dedupExchange","fetchExchange","cacheExchange","pipe","tap","MeDocument","betterUpdateQuery","Router","errorExchange","forward","ops$","error","message","includes","replace","createUrqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","updates","Mutation","login","_result","args","cache","info","query","result","errors","me","user","register","logout"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,aAAxB,QAAuD,MAAvD;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,OAA1B;AACA,SAGEC,UAHF,QAKO,sBALP;AAMA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AAEA,IAAMC,aAAuB,GAAG,SAA1BA,aAA0B;AAAA,MAAGC,OAAH,QAAGA,OAAH;AAAA,SAAiB,UAACC,IAAD,EAAU;AACzD,WAAOP,IAAI,CACTM,OAAO,CAACC,IAAD,CADE,EAETN,GAAG,CAAC,iBAAe;AAAA,UAAZO,KAAY,SAAZA,KAAY;;AACjB,UAAIA,KAAJ,aAAIA,KAAJ,uBAAIA,KAAK,CAAEC,OAAP,CAAeC,QAAf,CAAwB,mBAAxB,CAAJ,EAAkD;AAChDN,QAAAA,MAAM,CAACO,OAAP,CAAe,QAAf;AACD;AACF,KAJE,CAFM,CAAX;AAQD,GAT+B;AAAA,CAAhC;;AAWA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,WAAD;AAAA,SAAuB;AACrDC,IAAAA,GAAG,EAAE,+BADgD;AAErDC,IAAAA,YAAY,EAAE;AACZC,MAAAA,WAAW,EAAE;AADD,KAFuC;AAKrDC,IAAAA,SAAS,EAAE,CACTpB,aADS,EAETE,aAAa,CAAC;AACZmB,MAAAA,OAAO,EAAE;AACPC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,KAAK,EAAE,eAACC,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,EAAgC;AACrCrB,YAAAA,iBAAiB,CACfoB,KADe,EAEf;AAAEE,cAAAA,KAAK,EAAEvB;AAAT,aAFe,EAGfmB,OAHe,EAIf,UAACK,MAAD,EAASD,KAAT,EAAmB;AACjB,kBAAIC,MAAM,CAACN,KAAP,CAAaO,MAAjB,EAAyB;AACvB,uBAAOF,KAAP;AACD,eAFD,MAEO;AACL,uBAAO;AACLG,kBAAAA,EAAE,EAAEF,MAAM,CAACN,KAAP,CAAaS;AADZ,iBAAP;AAGD;AACF,aAZc,CAAjB;AAcD,WAhBO;AAiBRC,UAAAA,QAAQ,EAAE,kBAACT,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,EAAgC;AACxCrB,YAAAA,iBAAiB,CACfoB,KADe,EAEf;AAAEE,cAAAA,KAAK,EAAEvB;AAAT,aAFe,EAGfmB,OAHe,EAIf,UAACK,MAAD,EAASD,KAAT,EAAmB;AACjB,kBAAIC,MAAM,CAACI,QAAP,CAAgBH,MAApB,EAA4B;AAC1B,uBAAOF,KAAP;AACD,eAFD,MAEO;AACL,uBAAO;AACLG,kBAAAA,EAAE,EAAEF,MAAM,CAACI,QAAP,CAAgBD;AADf,iBAAP;AAGD;AACF,aAZc,CAAjB;AAcD,WAhCO;AAiCRE,UAAAA,MAAM,EAAE,gBAACV,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,EAAgC;AACtCrB,YAAAA,iBAAiB,CACfoB,KADe,EAEf;AAAEE,cAAAA,KAAK,EAAEvB;AAAT,aAFe,EAGfmB,OAHe,EAIf;AAAA,qBAAO;AAAEO,gBAAAA,EAAE,EAAE;AAAN,eAAP;AAAA,aAJe,CAAjB;AAMD;AAxCO;AADH;AADG,KAAD,CAFJ,EAgDTvB,aAhDS,EAiDTQ,WAjDS,EAkDTf,aAlDS;AAL0C,GAAvB;AAAA,CAAzB","sourcesContent":["import { dedupExchange, fetchExchange, Exchange } from 'urql';\nimport { cacheExchange } from '@urql/exchange-graphcache';\nimport { pipe, tap } from 'wonka';\nimport {\n  LoginMutation,\n  MeQuery,\n  MeDocument,\n  RegisterMutation,\n} from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery';\nimport Router from 'next/router';\n\nconst errorExchange: Exchange = ({ forward }) => (ops$) => {\n  return pipe(\n    forward(ops$),\n    tap(({ error }) => {\n      if (error?.message.includes('not authenticated')) {\n        Router.replace('/login');\n      }\n    })\n  );\n};\n\nexport const createUrqlClient = (ssrExchange: any) => ({\n  url: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: 'include' as const,\n  },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      updates: {\n        Mutation: {\n          login: (_result, args, cache, info) => {\n            betterUpdateQuery<LoginMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              (result, query) => {\n                if (result.login.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.login.user,\n                  };\n                }\n              }\n            );\n          },\n          register: (_result, args, cache, info) => {\n            betterUpdateQuery<RegisterMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              (result, query) => {\n                if (result.register.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.register.user,\n                  };\n                }\n              }\n            );\n          },\n          logout: (_result, args, cache, info) => {\n            betterUpdateQuery<LoginMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              () => ({ me: null })\n            );\n          },\n        },\n      },\n    }),\n    errorExchange,\n    ssrExchange,\n    fetchExchange,\n  ],\n});\n"]},"metadata":{},"sourceType":"module"}