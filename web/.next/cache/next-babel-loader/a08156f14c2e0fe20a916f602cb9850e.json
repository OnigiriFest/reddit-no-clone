{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { dedupExchange, fetchExchange, stringifyVariables } from 'urql';\nimport { cacheExchange } from '@urql/exchange-graphcache';\nimport { pipe, tap } from 'wonka';\nimport { MeDocument } from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery';\nimport Router from 'next/router';\n\nvar errorExchange = function errorExchange(_ref) {\n  var forward = _ref.forward;\n  return function (ops$) {\n    return pipe(forward(ops$), tap(function (_ref2) {\n      var error = _ref2.error;\n\n      if (error === null || error === void 0 ? void 0 : error.message.includes('not authenticated')) {\n        Router.replace('/login');\n      }\n    }));\n  };\n};\n\nexport var cursorPagination = function cursorPagination() {\n  return function (_parent, fieldArgs, cache, info) {\n    var entityKey = info.parentKey,\n        fieldName = info.fieldName;\n    var allFields = cache.inspectFields(entityKey);\n    var fieldInfos = allFields.filter(function (info) {\n      return info.fieldName === fieldName;\n    });\n    var size = fieldInfos.length;\n\n    if (size === 0) {\n      return undefined;\n    }\n\n    var fieldKey = \"\".concat(fieldName, \"(\").concat(stringifyVariables(fieldArgs), \")\");\n    var isItInTheCache = cache.resolve(cache.resolveFieldByKey(entityKey, fieldKey), 'posts');\n    info.partial = !isItInTheCache;\n    var hasMore = true;\n    var results = [];\n    fieldInfos.forEach(function (fi) {\n      var key = cache.resolveFieldByKey(entityKey, fi.fieldKey);\n      var data = cache.resolve(key, 'posts');\n\n      var _hasMore = cache.resolve(key, 'hasMore');\n\n      if (!_hasMore) {\n        hasMore = _hasMore;\n      }\n\n      results.push.apply(results, _toConsumableArray(data));\n    });\n    return {\n      hasMore: hasMore,\n      posts: results\n    };\n  };\n};\nexport var createUrqlClient = function createUrqlClient(ssrExchange) {\n  return {\n    url: 'http://localhost:4000/graphql',\n    fetchOptions: {\n      credentials: 'include'\n    },\n    exchanges: [dedupExchange, cacheExchange({\n      resolvers: {\n        Query: {\n          posts: cursorPagination()\n        }\n      },\n      updates: {\n        Mutation: {\n          login: function login(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function (result, query) {\n              if (result.login.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.login.user\n                };\n              }\n            });\n          },\n          register: function register(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function (result, query) {\n              if (result.register.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.register.user\n                };\n              }\n            });\n          },\n          logout: function logout(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function () {\n              return {\n                me: null\n              };\n            });\n          }\n        }\n      }\n    }), errorExchange, ssrExchange, fetchExchange]\n  };\n};","map":{"version":3,"sources":["/home/facundo/code/reddit/web/src/utils/createUrqlClient.ts"],"names":["dedupExchange","fetchExchange","stringifyVariables","cacheExchange","pipe","tap","MeDocument","betterUpdateQuery","Router","errorExchange","forward","ops$","error","message","includes","replace","cursorPagination","_parent","fieldArgs","cache","info","entityKey","parentKey","fieldName","allFields","inspectFields","fieldInfos","filter","size","length","undefined","fieldKey","isItInTheCache","resolve","resolveFieldByKey","partial","hasMore","results","forEach","fi","key","data","_hasMore","push","posts","createUrqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","resolvers","Query","updates","Mutation","login","_result","args","query","result","errors","me","user","register","logout"],"mappings":"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","sourcesContent":["import {\n  dedupExchange,\n  fetchExchange,\n  Exchange,\n  stringifyVariables,\n} from 'urql';\nimport { cacheExchange, Resolver } from '@urql/exchange-graphcache';\nimport { pipe, tap } from 'wonka';\nimport {\n  LoginMutation,\n  MeQuery,\n  MeDocument,\n  RegisterMutation,\n} from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery';\nimport Router from 'next/router';\nimport { fieldInfoOfKey } from '@urql/exchange-graphcache/dist/types/store';\n\nconst errorExchange: Exchange = ({ forward }) => (ops$) => {\n  return pipe(\n    forward(ops$),\n    tap(({ error }) => {\n      if (error?.message.includes('not authenticated')) {\n        Router.replace('/login');\n      }\n    })\n  );\n};\n\nexport interface PaginationParams {\n  offsetArgument?: string;\n  limitArgument?: string;\n}\n\nexport const cursorPagination = (): Resolver => {\n  return (_parent, fieldArgs, cache, info) => {\n    const { parentKey: entityKey, fieldName } = info;\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter((info) => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n    if (size === 0) {\n      return undefined;\n    }\n\n    const fieldKey = `${fieldName}(${stringifyVariables(fieldArgs)})`;\n    const isItInTheCache = cache.resolve(\n      cache.resolveFieldByKey(entityKey, fieldKey) as string,\n      'posts'\n    );\n\n    info.partial = !isItInTheCache;\n    let hasMore = true;\n\n    const results: string[] = [];\n    fieldInfos.forEach((fi) => {\n      const key = cache.resolveFieldByKey(entityKey, fi.fieldKey) as string;\n      const data = cache.resolve(key, 'posts') as string[];\n      const _hasMore = cache.resolve(key, 'hasMore');\n\n      if (!_hasMore) {\n        hasMore = _hasMore as boolean;\n      }\n\n      results.push(...data);\n    });\n\n    return {\n      hasMore,\n      posts: results,\n    };\n  };\n};\n\nexport const createUrqlClient = (ssrExchange: any) => ({\n  url: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: 'include' as const,\n  },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      resolvers: {\n        Query: {\n          posts: cursorPagination(),\n        },\n      },\n      updates: {\n        Mutation: {\n          login: (_result, args, cache, info) => {\n            betterUpdateQuery<LoginMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              (result, query) => {\n                if (result.login.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.login.user,\n                  };\n                }\n              }\n            );\n          },\n          register: (_result, args, cache, info) => {\n            betterUpdateQuery<RegisterMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              (result, query) => {\n                if (result.register.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.register.user,\n                  };\n                }\n              }\n            );\n          },\n          logout: (_result, args, cache, info) => {\n            betterUpdateQuery<LoginMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              () => ({ me: null })\n            );\n          },\n        },\n      },\n    }),\n    errorExchange,\n    ssrExchange,\n    fetchExchange,\n  ],\n});\n"]},"metadata":{},"sourceType":"module"}