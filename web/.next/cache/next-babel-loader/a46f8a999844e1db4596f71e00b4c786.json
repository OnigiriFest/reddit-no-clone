{"ast":null,"code":"var _jsxFileName = \"/home/facundo/code/reddit/web/src/pages/change-password/[token].tsx\";\nvar __jsx = React.createElement;\nimport { Button, Box, Link } from '@chakra-ui/core';\nimport { Form, Formik } from 'formik';\nimport React, { useState } from 'react';\nimport { InputField } from '../../components/InputField';\nimport { Wrapper } from '../../components/Wrapper';\nimport { useChangePasswordMutation } from '../../generated/graphql';\nimport { useRouter } from 'next/router';\nimport { toErrorMap } from '../../utils/toErrorMap';\nimport { withUrqlClient } from 'next-urql';\nimport { createUrqlClient } from '../../utils/createUrqlClient';\nimport NextLink from 'next/link';\n\nconst ChangePassword = ({\n  token\n}) => {\n  const router = useRouter();\n  const [, changePassword] = useChangePasswordMutation();\n  const {\n    0: tokenError,\n    1: setTokenError\n  } = useState('');\n  return __jsx(Wrapper, {\n    variant: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, __jsx(Formik, {\n    initialValues: {\n      newPassword: ''\n    },\n    onSubmit: async (values, {\n      setErrors\n    }) => {\n      var _response$data, _response$data2;\n\n      const response = await changePassword({\n        newPassword: values.newPassword,\n        token\n      });\n\n      if ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.changePassword.errors) {\n        const errorMap = toErrorMap(response.data.changePassword.errors);\n\n        if ('token' in errorMap) {\n          setTokenError(errorMap.token);\n        }\n\n        setErrors(errorMap);\n      } else if ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.changePassword.user) {\n        router.push('/');\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, ({\n    isSubmitting\n  }) => __jsx(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }, __jsx(InputField, {\n    name: \"newPassword\",\n    placeholder: \"new password\",\n    label: \"New Password\",\n    type: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }), tokenError ? __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    style: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  }, tokenError), __jsx(NextLink, {\n    href: \"/forgot-password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }, __jsx(Link, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 19\n    }\n  }, \"go forget it again\"))) : null, __jsx(Button, {\n    type: \"submit\",\n    variantColor: \"teal\",\n    mt: \"4\",\n    isLoading: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, \"change password\"))));\n};\n\nChangePassword.getInitialProps = ({\n  query\n}) => {\n  return {\n    token: query.token\n  };\n};\n\nexport default withUrqlClient(createUrqlClient)(ChangePassword);","map":{"version":3,"sources":["/home/facundo/code/reddit/web/src/pages/change-password/[token].tsx"],"names":["Button","Box","Link","Form","Formik","React","useState","InputField","Wrapper","useChangePasswordMutation","useRouter","toErrorMap","withUrqlClient","createUrqlClient","NextLink","ChangePassword","token","router","changePassword","tokenError","setTokenError","newPassword","values","setErrors","response","data","errors","errorMap","user","push","isSubmitting","color","getInitialProps","query"],"mappings":"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","sourcesContent":["import { Button, Box, Link } from '@chakra-ui/core';\nimport { Form, Formik } from 'formik';\nimport { NextPage } from 'next';\nimport React, { useState } from 'react';\nimport { InputField } from '../../components/InputField';\nimport { Wrapper } from '../../components/Wrapper';\nimport { useChangePasswordMutation } from '../../generated/graphql';\nimport { useRouter } from 'next/router';\nimport { toErrorMap } from '../../utils/toErrorMap';\nimport { withUrqlClient } from 'next-urql';\nimport { createUrqlClient } from '../../utils/createUrqlClient';\nimport NextLink from 'next/link';\n\nconst ChangePassword: NextPage<{ token: string }> = ({ token }) => {\n  const router = useRouter();\n  const [, changePassword] = useChangePasswordMutation();\n  const [tokenError, setTokenError] = useState('');\n\n  return (\n    <Wrapper variant=\"small\">\n      <Formik\n        initialValues={{ newPassword: '' }}\n        onSubmit={async (values, { setErrors }) => {\n          const response = await changePassword({\n            newPassword: values.newPassword,\n            token,\n          });\n          if (response.data?.changePassword.errors) {\n            const errorMap = toErrorMap(response.data.changePassword.errors);\n            if ('token' in errorMap) {\n              setTokenError(errorMap.token);\n            }\n            setErrors(errorMap);\n          } else if (response.data?.changePassword.user) {\n            router.push('/');\n          }\n        }}>\n        {({ isSubmitting }) => (\n          <Form>\n            <InputField\n              name=\"newPassword\"\n              placeholder=\"new password\"\n              label=\"New Password\"\n              type=\"password\"\n            />\n            {tokenError ? (\n              <Box>\n                <Box style={{ color: 'red' }}>{tokenError}</Box>\n                <NextLink href=\"/forgot-password\">\n                  <Link>go forget it again</Link>\n                </NextLink>\n              </Box>\n            ) : null}\n            <Button\n              type=\"submit\"\n              variantColor=\"teal\"\n              mt=\"4\"\n              isLoading={isSubmitting}>\n              change password\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Wrapper>\n  );\n};\n\nChangePassword.getInitialProps = ({ query }) => {\n  return {\n    token: query.token as string,\n  };\n};\n\nexport default withUrqlClient(createUrqlClient)(ChangePassword);\n"]},"metadata":{},"sourceType":"module"}