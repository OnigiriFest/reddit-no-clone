{"ast":null,"code":"import { dedupExchange, fetchExchange } from 'urql';\nimport { cacheExchange } from '@urql/exchange-graphcache';\nimport { pipe, tap } from 'wonka';\nimport { MeDocument } from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery';\nimport Router from 'next/router';\n\nconst errorExchange = ({\n  forward\n}) => ops$ => {\n  return pipe(forward(ops$), tap(({\n    error\n  }) => {\n    if (error === null || error === void 0 ? void 0 : error.message.includes('not authenticated')) {\n      Router.replace('/login');\n    }\n  }));\n};\n\nexport const cursorPagination = () => {\n  return (_parent, fieldArgs, cache, info) => {\n    const {\n      parentKey: entityKey,\n      fieldName\n    } = info;\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter(info => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n\n    if (size === 0) {\n      return undefined;\n    }\n\n    const results = [];\n    fieldInfos.forEach(fi => {\n      const data = cache.resolveFieldByKey(entityKey, fi.fieldKey);\n      results.push(...data);\n    });\n    return results;\n  };\n};\nexport const createUrqlClient = ssrExchange => ({\n  url: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: 'include'\n  },\n  exchanges: [dedupExchange, cacheExchange({\n    resolvers: {\n      Query: {\n        posts: cursorPagination()\n      }\n    },\n    updates: {\n      Mutation: {\n        login: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, (result, query) => {\n            if (result.login.errors) {\n              return query;\n            } else {\n              return {\n                me: result.login.user\n              };\n            }\n          });\n        },\n        register: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, (result, query) => {\n            if (result.register.errors) {\n              return query;\n            } else {\n              return {\n                me: result.register.user\n              };\n            }\n          });\n        },\n        logout: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, () => ({\n            me: null\n          }));\n        }\n      }\n    }\n  }), errorExchange, ssrExchange, fetchExchange]\n});","map":{"version":3,"sources":["/home/facundo/code/reddit/web/src/utils/createUrqlClient.ts"],"names":["dedupExchange","fetchExchange","cacheExchange","pipe","tap","MeDocument","betterUpdateQuery","Router","errorExchange","forward","ops$","error","message","includes","replace","cursorPagination","_parent","fieldArgs","cache","info","parentKey","entityKey","fieldName","allFields","inspectFields","fieldInfos","filter","size","length","undefined","results","forEach","fi","data","resolveFieldByKey","fieldKey","push","createUrqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","resolvers","Query","posts","updates","Mutation","login","_result","args","query","result","errors","me","user","register","logout"],"mappings":"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","sourcesContent":["import { dedupExchange, fetchExchange, Exchange } from 'urql';\nimport { cacheExchange, Resolver } from '@urql/exchange-graphcache';\nimport { pipe, tap } from 'wonka';\nimport {\n  LoginMutation,\n  MeQuery,\n  MeDocument,\n  RegisterMutation,\n} from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery';\nimport Router from 'next/router';\nimport { fieldInfoOfKey } from '@urql/exchange-graphcache/dist/types/store';\n\nconst errorExchange: Exchange = ({ forward }) => (ops$) => {\n  return pipe(\n    forward(ops$),\n    tap(({ error }) => {\n      if (error?.message.includes('not authenticated')) {\n        Router.replace('/login');\n      }\n    })\n  );\n};\n\nexport interface PaginationParams {\n  offsetArgument?: string;\n  limitArgument?: string;\n}\n\nexport const cursorPagination = (): Resolver => {\n  return (_parent, fieldArgs, cache, info) => {\n    const { parentKey: entityKey, fieldName } = info;\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter((info) => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n    if (size === 0) {\n      return undefined;\n    }\n\n    const results = [];\n    fieldInfos.forEach((fi) => {\n      const data = cache.resolveFieldByKey(entityKey, fi.fieldKey) as string[];\n      results.push(...data);\n    });\n\n    return results;\n  };\n};\n\nexport const createUrqlClient = (ssrExchange: any) => ({\n  url: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: 'include' as const,\n  },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      resolvers: {\n        Query: {\n          posts: cursorPagination(),\n        },\n      },\n      updates: {\n        Mutation: {\n          login: (_result, args, cache, info) => {\n            betterUpdateQuery<LoginMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              (result, query) => {\n                if (result.login.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.login.user,\n                  };\n                }\n              }\n            );\n          },\n          register: (_result, args, cache, info) => {\n            betterUpdateQuery<RegisterMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              (result, query) => {\n                if (result.register.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.register.user,\n                  };\n                }\n              }\n            );\n          },\n          logout: (_result, args, cache, info) => {\n            betterUpdateQuery<LoginMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              () => ({ me: null })\n            );\n          },\n        },\n      },\n    }),\n    errorExchange,\n    ssrExchange,\n    fetchExchange,\n  ],\n});\n"]},"metadata":{},"sourceType":"module"}