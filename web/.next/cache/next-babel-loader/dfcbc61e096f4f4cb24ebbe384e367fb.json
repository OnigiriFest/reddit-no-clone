{"ast":null,"code":"import { dedupExchange, fetchExchange, stringifyVariables } from 'urql';\nimport { cacheExchange } from '@urql/exchange-graphcache';\nimport { pipe, tap } from 'wonka';\nimport { MeDocument } from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery';\nimport Router from 'next/router';\nimport gql from 'graphql-tag';\nimport { isServer } from './isServer';\n\nconst errorExchange = ({\n  forward\n}) => ops$ => {\n  return pipe(forward(ops$), tap(({\n    error\n  }) => {\n    if (error === null || error === void 0 ? void 0 : error.message.includes('not authenticated')) {\n      Router.replace('/login');\n    }\n  }));\n};\n\nexport const cursorPagination = () => {\n  return (_parent, fieldArgs, cache, info) => {\n    const {\n      parentKey: entityKey,\n      fieldName\n    } = info;\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter(info => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n\n    if (size === 0) {\n      return undefined;\n    }\n\n    const fieldKey = `${fieldName}(${stringifyVariables(fieldArgs)})`;\n    const isItInTheCache = cache.resolve(cache.resolveFieldByKey(entityKey, fieldKey), 'posts');\n    info.partial = !isItInTheCache;\n    let hasMore = true;\n    const results = [];\n    fieldInfos.forEach(fi => {\n      const key = cache.resolveFieldByKey(entityKey, fi.fieldKey);\n      const data = cache.resolve(key, 'posts');\n\n      const _hasMore = cache.resolve(key, 'hasMore');\n\n      if (!_hasMore) {\n        hasMore = _hasMore;\n      }\n\n      results.push(...data);\n    });\n    return {\n      __typename: 'PaginatedPosts',\n      hasMore,\n      posts: results\n    };\n  };\n};\nexport const createUrqlClient = (ssrExchange, ctx) => {\n  let cookie = '';\n\n  if (isServer()) {\n    cookie = ctx.req.headers.cookie;\n  }\n\n  return {\n    url: 'http://localhost:4000/graphql',\n    fetchOptions: {\n      credentials: 'include',\n      headers: cookie ? {\n        cookie\n      } : undefined\n    },\n    exchanges: [dedupExchange, cacheExchange({\n      keys: {\n        PaginatedPosts: () => null\n      },\n      resolvers: {\n        Query: {\n          posts: cursorPagination()\n        }\n      },\n      updates: {\n        Mutation: {\n          vote: (_result, args, cache, info) => {\n            const {\n              postId,\n              value\n            } = args;\n            const data = cache.readFragment(gql`\n                  fragment _ on Post {\n                    id\n                    points\n                    voteStatus\n                  }\n                `, {\n              id: postId\n            });\n\n            if (data) {\n              if (data.voteStatus === args.value) {\n                return;\n              }\n\n              const newPoints = data.points + (!data.voteStatus ? 1 : 2) * value;\n              cache.writeFragment(gql`\n                    fragment __ on Post {\n                      points\n                      voteStatus\n                    }\n                  `, {\n                id: postId,\n                points: newPoints,\n                voteStatus: value\n              });\n            }\n          },\n          createPost: (_result, args, cache, info) => {\n            const allFields = cache.inspectFields('Query');\n            const fieldInfos = allFields.filter(info => info.fieldName === 'posts');\n            fieldInfos.forEach(fi => {\n              cache.invalidate('Query', 'posts', fi.arguments || {});\n            });\n          },\n          login: (_result, args, cache, info) => {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, (result, query) => {\n              if (result.login.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.login.user\n                };\n              }\n            });\n          },\n          register: (_result, args, cache, info) => {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, (result, query) => {\n              if (result.register.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.register.user\n                };\n              }\n            });\n          },\n          logout: (_result, args, cache, info) => {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, () => ({\n              me: null\n            }));\n          }\n        }\n      }\n    }), errorExchange, ssrExchange, fetchExchange]\n  };\n};","map":{"version":3,"sources":["/home/facundo/code/reddit/web/src/utils/createUrqlClient.ts"],"names":["dedupExchange","fetchExchange","stringifyVariables","cacheExchange","pipe","tap","MeDocument","betterUpdateQuery","Router","gql","isServer","errorExchange","forward","ops$","error","message","includes","replace","cursorPagination","_parent","fieldArgs","cache","info","parentKey","entityKey","fieldName","allFields","inspectFields","fieldInfos","filter","size","length","undefined","fieldKey","isItInTheCache","resolve","resolveFieldByKey","partial","hasMore","results","forEach","fi","key","data","_hasMore","push","__typename","posts","createUrqlClient","ssrExchange","ctx","cookie","req","headers","url","fetchOptions","credentials","exchanges","keys","PaginatedPosts","resolvers","Query","updates","Mutation","vote","_result","args","postId","value","readFragment","id","voteStatus","newPoints","points","writeFragment","createPost","invalidate","arguments","login","query","result","errors","me","user","register","logout"],"mappings":"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","sourcesContent":["import {\n  dedupExchange,\n  fetchExchange,\n  Exchange,\n  stringifyVariables,\n} from 'urql';\nimport { cacheExchange, Resolver } from '@urql/exchange-graphcache';\nimport { pipe, tap } from 'wonka';\nimport {\n  LoginMutation,\n  MeQuery,\n  MeDocument,\n  RegisterMutation,\n  VoteMutationVariables,\n} from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery';\nimport Router from 'next/router';\nimport { fieldInfoOfKey } from '@urql/exchange-graphcache/dist/types/store';\nimport gql from 'graphql-tag';\nimport { isServer } from './isServer';\n\nconst errorExchange: Exchange = ({ forward }) => (ops$) => {\n  return pipe(\n    forward(ops$),\n    tap(({ error }) => {\n      if (error?.message.includes('not authenticated')) {\n        Router.replace('/login');\n      }\n    })\n  );\n};\n\nexport interface PaginationParams {\n  offsetArgument?: string;\n  limitArgument?: string;\n}\n\nexport const cursorPagination = (): Resolver => {\n  return (_parent, fieldArgs, cache, info) => {\n    const { parentKey: entityKey, fieldName } = info;\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter((info) => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n    if (size === 0) {\n      return undefined;\n    }\n\n    const fieldKey = `${fieldName}(${stringifyVariables(fieldArgs)})`;\n    const isItInTheCache = cache.resolve(\n      cache.resolveFieldByKey(entityKey, fieldKey) as string,\n      'posts'\n    );\n\n    info.partial = !isItInTheCache;\n    let hasMore = true;\n\n    const results: string[] = [];\n    fieldInfos.forEach((fi) => {\n      const key = cache.resolveFieldByKey(entityKey, fi.fieldKey) as string;\n      const data = cache.resolve(key, 'posts') as string[];\n      const _hasMore = cache.resolve(key, 'hasMore');\n\n      if (!_hasMore) {\n        hasMore = _hasMore as boolean;\n      }\n\n      results.push(...data);\n    });\n\n    return {\n      __typename: 'PaginatedPosts',\n      hasMore,\n      posts: results,\n    };\n  };\n};\n\nexport const createUrqlClient = (ssrExchange: any, ctx: any) => {\n  let cookie = '';\n  if (isServer()) {\n    cookie = ctx.req.headers.cookie;\n  }\n\n  return {\n    url: 'http://localhost:4000/graphql',\n    fetchOptions: {\n      credentials: 'include' as const,\n      headers: cookie\n        ? {\n            cookie,\n          }\n        : undefined,\n    },\n    exchanges: [\n      dedupExchange,\n      cacheExchange({\n        keys: {\n          PaginatedPosts: () => null,\n        },\n        resolvers: {\n          Query: {\n            posts: cursorPagination(),\n          },\n        },\n        updates: {\n          Mutation: {\n            vote: (_result, args, cache, info) => {\n              const { postId, value } = args as VoteMutationVariables;\n              const data = cache.readFragment(\n                gql`\n                  fragment _ on Post {\n                    id\n                    points\n                    voteStatus\n                  }\n                `,\n                { id: postId } as any\n              );\n              if (data) {\n                if (data.voteStatus === args.value) {\n                  return;\n                }\n                const newPoints =\n                  (data.points as number) + (!data.voteStatus ? 1 : 2) * value;\n\n                cache.writeFragment(\n                  gql`\n                    fragment __ on Post {\n                      points\n                      voteStatus\n                    }\n                  `,\n                  { id: postId, points: newPoints, voteStatus: value } as any\n                );\n              }\n            },\n            createPost: (_result, args, cache, info) => {\n              const allFields = cache.inspectFields('Query');\n              const fieldInfos = allFields.filter(\n                (info) => info.fieldName === 'posts'\n              );\n              fieldInfos.forEach((fi) => {\n                cache.invalidate('Query', 'posts', fi.arguments || {});\n              });\n            },\n            login: (_result, args, cache, info) => {\n              betterUpdateQuery<LoginMutation, MeQuery>(\n                cache,\n                { query: MeDocument },\n                _result,\n                (result, query) => {\n                  if (result.login.errors) {\n                    return query;\n                  } else {\n                    return {\n                      me: result.login.user,\n                    };\n                  }\n                }\n              );\n            },\n            register: (_result, args, cache, info) => {\n              betterUpdateQuery<RegisterMutation, MeQuery>(\n                cache,\n                { query: MeDocument },\n                _result,\n                (result, query) => {\n                  if (result.register.errors) {\n                    return query;\n                  } else {\n                    return {\n                      me: result.register.user,\n                    };\n                  }\n                }\n              );\n            },\n            logout: (_result, args, cache, info) => {\n              betterUpdateQuery<LoginMutation, MeQuery>(\n                cache,\n                { query: MeDocument },\n                _result,\n                () => ({ me: null })\n              );\n            },\n          },\n        },\n      }),\n      errorExchange,\n      ssrExchange,\n      fetchExchange,\n    ],\n  };\n};\n"]},"metadata":{},"sourceType":"module"}