{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n                    fragment __ on Post {\\n                      points\\n                      voteStatus\\n                    }\\n                  \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n                  fragment _ on Post {\\n                    id\\n                    points\\n                    voteStatus\\n                  }\\n                \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { cacheExchange } from '@urql/exchange-graphcache';\nimport gql from 'graphql-tag';\nimport Router from 'next/router';\nimport { dedupExchange, fetchExchange, stringifyVariables } from 'urql';\nimport { pipe, tap } from 'wonka';\nimport { MeDocument } from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery';\nimport { isServer } from './isServer';\n\nvar errorExchange = function errorExchange(_ref) {\n  var forward = _ref.forward;\n  return function (ops$) {\n    return pipe(forward(ops$), tap(function (_ref2) {\n      var error = _ref2.error;\n\n      if (error === null || error === void 0 ? void 0 : error.message.includes('not authenticated')) {\n        Router.replace('/login');\n      }\n    }));\n  };\n};\n\nexport var cursorPagination = function cursorPagination() {\n  return function (_parent, fieldArgs, cache, info) {\n    var entityKey = info.parentKey,\n        fieldName = info.fieldName;\n    var allFields = cache.inspectFields(entityKey);\n    var fieldInfos = allFields.filter(function (info) {\n      return info.fieldName === fieldName;\n    });\n    var size = fieldInfos.length;\n\n    if (size === 0) {\n      return undefined;\n    }\n\n    var fieldKey = \"\".concat(fieldName, \"(\").concat(stringifyVariables(fieldArgs), \")\");\n    var isItInTheCache = cache.resolve(cache.resolveFieldByKey(entityKey, fieldKey), 'posts');\n    info.partial = !isItInTheCache;\n    var hasMore = true;\n    var results = [];\n    fieldInfos.forEach(function (fi) {\n      var key = cache.resolveFieldByKey(entityKey, fi.fieldKey);\n      var data = cache.resolve(key, 'posts');\n\n      var _hasMore = cache.resolve(key, 'hasMore');\n\n      if (!_hasMore) {\n        hasMore = _hasMore;\n      }\n\n      results.push.apply(results, _toConsumableArray(data));\n    });\n    return {\n      __typename: 'PaginatedPosts',\n      hasMore: hasMore,\n      posts: results\n    };\n  };\n};\n\nvar invalidateAllPost = function invalidateAllPost(cache) {\n  var allFields = cache.inspectFields('Query');\n  var fieldInfos = allFields.filter(function (info) {\n    return info.fieldName === 'posts';\n  });\n  fieldInfos.forEach(function (fi) {\n    cache.invalidate('Query', 'posts', fi.arguments || {});\n  });\n};\n\nexport var createUrqlClient = function createUrqlClient(ssrExchange, ctx) {\n  var cookie = '';\n\n  if (isServer()) {\n    var _ctx$req, _ctx$req$headers;\n\n    cookie = ctx === null || ctx === void 0 ? void 0 : (_ctx$req = ctx.req) === null || _ctx$req === void 0 ? void 0 : (_ctx$req$headers = _ctx$req.headers) === null || _ctx$req$headers === void 0 ? void 0 : _ctx$req$headers.cookie;\n  }\n\n  return {\n    url: 'http://localhost:4000/graphql',\n    fetchOptions: {\n      credentials: 'include',\n      headers: cookie ? {\n        cookie: cookie\n      } : undefined\n    },\n    exchanges: [dedupExchange, cacheExchange({\n      keys: {\n        PaginatedPosts: function PaginatedPosts() {\n          return null;\n        }\n      },\n      resolvers: {\n        Query: {\n          posts: cursorPagination()\n        }\n      },\n      updates: {\n        Mutation: {\n          deletePost: function deletePost(_result, args, cache, info) {\n            cache.invalidate({\n              __typename: 'Post',\n              id: args.id\n            });\n          },\n          vote: function vote(_result, args, cache, info) {\n            var _ref3 = args,\n                postId = _ref3.postId,\n                value = _ref3.value;\n            var data = cache.readFragment(gql(_templateObject()), {\n              id: postId\n            });\n\n            if (data) {\n              if (data.voteStatus === args.value) {\n                return;\n              }\n\n              var newPoints = data.points + (!data.voteStatus ? 1 : 2) * value;\n              cache.writeFragment(gql(_templateObject2()), {\n                id: postId,\n                points: newPoints,\n                voteStatus: value\n              });\n            }\n          },\n          createPost: function createPost(_result, args, cache, info) {\n            invalidateAllPost(cache);\n          },\n          login: function login(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function (result, query) {\n              if (result.login.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.login.user\n                };\n              }\n            });\n          },\n          register: function register(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function (result, query) {\n              if (result.register.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.register.user\n                };\n              }\n            });\n          },\n          logout: function logout(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function () {\n              return {\n                me: null\n              };\n            });\n          }\n        }\n      }\n    }), errorExchange, ssrExchange, fetchExchange]\n  };\n};","map":{"version":3,"sources":["/home/facundo/code/reddit/web/src/utils/createUrqlClient.ts"],"names":["cacheExchange","gql","Router","dedupExchange","fetchExchange","stringifyVariables","pipe","tap","MeDocument","betterUpdateQuery","isServer","errorExchange","forward","ops$","error","message","includes","replace","cursorPagination","_parent","fieldArgs","cache","info","entityKey","parentKey","fieldName","allFields","inspectFields","fieldInfos","filter","size","length","undefined","fieldKey","isItInTheCache","resolve","resolveFieldByKey","partial","hasMore","results","forEach","fi","key","data","_hasMore","push","__typename","posts","invalidateAllPost","invalidate","arguments","createUrqlClient","ssrExchange","ctx","cookie","req","headers","url","fetchOptions","credentials","exchanges","keys","PaginatedPosts","resolvers","Query","updates","Mutation","deletePost","_result","args","id","vote","postId","value","readFragment","voteStatus","newPoints","points","writeFragment","createPost","login","query","result","errors","me","user","register","logout"],"mappings":"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","sourcesContent":["import { cacheExchange, Resolver } from '@urql/exchange-graphcache';\nimport gql from 'graphql-tag';\nimport Router from 'next/router';\nimport {\n  dedupExchange,\n  Exchange,\n  fetchExchange,\n  stringifyVariables,\n} from 'urql';\nimport { pipe, tap } from 'wonka';\nimport {\n  LoginMutation,\n  MeDocument,\n  MeQuery,\n  RegisterMutation,\n  VoteMutationVariables,\n  DeletePostMutationVariables,\n} from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery';\nimport { isServer } from './isServer';\n\nconst errorExchange: Exchange = ({ forward }) => (ops$) => {\n  return pipe(\n    forward(ops$),\n    tap(({ error }) => {\n      if (error?.message.includes('not authenticated')) {\n        Router.replace('/login');\n      }\n    })\n  );\n};\n\nexport interface PaginationParams {\n  offsetArgument?: string;\n  limitArgument?: string;\n}\n\nexport const cursorPagination = (): Resolver => {\n  return (_parent, fieldArgs, cache, info) => {\n    const { parentKey: entityKey, fieldName } = info;\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter((info) => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n    if (size === 0) {\n      return undefined;\n    }\n\n    const fieldKey = `${fieldName}(${stringifyVariables(fieldArgs)})`;\n    const isItInTheCache = cache.resolve(\n      cache.resolveFieldByKey(entityKey, fieldKey) as string,\n      'posts'\n    );\n\n    info.partial = !isItInTheCache;\n    let hasMore = true;\n\n    const results: string[] = [];\n    fieldInfos.forEach((fi) => {\n      const key = cache.resolveFieldByKey(entityKey, fi.fieldKey) as string;\n      const data = cache.resolve(key, 'posts') as string[];\n      const _hasMore = cache.resolve(key, 'hasMore');\n\n      if (!_hasMore) {\n        hasMore = _hasMore as boolean;\n      }\n\n      results.push(...data);\n    });\n\n    return {\n      __typename: 'PaginatedPosts',\n      hasMore,\n      posts: results,\n    };\n  };\n};\n\nconst invalidateAllPost = (cache: Cache) => {\n  const allFields = cache.inspectFields('Query');\n  const fieldInfos = allFields.filter((info) => info.fieldName === 'posts');\n  fieldInfos.forEach((fi) => {\n    cache.invalidate('Query', 'posts', fi.arguments || {});\n  });\n};\n\nexport const createUrqlClient = (ssrExchange: any, ctx: any) => {\n  let cookie = '';\n  if (isServer()) {\n    cookie = ctx?.req?.headers?.cookie;\n  }\n\n  return {\n    url: 'http://localhost:4000/graphql',\n    fetchOptions: {\n      credentials: 'include' as const,\n      headers: cookie\n        ? {\n            cookie,\n          }\n        : undefined,\n    },\n    exchanges: [\n      dedupExchange,\n      cacheExchange({\n        keys: {\n          PaginatedPosts: () => null,\n        },\n        resolvers: {\n          Query: {\n            posts: cursorPagination(),\n          },\n        },\n        updates: {\n          Mutation: {\n            deletePost: (_result, args, cache, info) => {\n              cache.invalidate({\n                __typename: 'Post',\n                id: (args as DeletePostMutationVariables).id,\n              });\n            },\n            vote: (_result, args, cache, info) => {\n              const { postId, value } = args as VoteMutationVariables;\n              const data = cache.readFragment(\n                gql`\n                  fragment _ on Post {\n                    id\n                    points\n                    voteStatus\n                  }\n                `,\n                { id: postId } as any\n              );\n              if (data) {\n                if (data.voteStatus === args.value) {\n                  return;\n                }\n                const newPoints =\n                  (data.points as number) + (!data.voteStatus ? 1 : 2) * value;\n\n                cache.writeFragment(\n                  gql`\n                    fragment __ on Post {\n                      points\n                      voteStatus\n                    }\n                  `,\n                  { id: postId, points: newPoints, voteStatus: value } as any\n                );\n              }\n            },\n            createPost: (_result, args, cache, info) => {\n              invalidateAllPost(cache);\n            },\n            login: (_result, args, cache, info) => {\n              betterUpdateQuery<LoginMutation, MeQuery>(\n                cache,\n                { query: MeDocument },\n                _result,\n                (result, query) => {\n                  if (result.login.errors) {\n                    return query;\n                  } else {\n                    return {\n                      me: result.login.user,\n                    };\n                  }\n                }\n              );\n            },\n            register: (_result, args, cache, info) => {\n              betterUpdateQuery<RegisterMutation, MeQuery>(\n                cache,\n                { query: MeDocument },\n                _result,\n                (result, query) => {\n                  if (result.register.errors) {\n                    return query;\n                  } else {\n                    return {\n                      me: result.register.user,\n                    };\n                  }\n                }\n              );\n            },\n            logout: (_result, args, cache, info) => {\n              betterUpdateQuery<LoginMutation, MeQuery>(\n                cache,\n                { query: MeDocument },\n                _result,\n                () => ({ me: null })\n              );\n            },\n          },\n        },\n      }),\n      errorExchange,\n      ssrExchange,\n      fetchExchange,\n    ],\n  };\n};\n"]},"metadata":{},"sourceType":"module"}