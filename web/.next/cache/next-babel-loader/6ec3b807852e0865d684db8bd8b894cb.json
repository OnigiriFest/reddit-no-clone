{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/esm/objectDestructuringEmpty\";\n\nvar _this = this,\n    _jsxFileName = \"/home/facundo/code/reddit/web/src/pages/post/edit/[id].tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Box, Button } from '@chakra-ui/core';\nimport { Form, Formik } from 'formik';\nimport { withUrqlClient } from 'next-urql';\nimport { useRouter } from 'next/router';\nimport React from 'react';\nimport { InputField } from '../../../components/InputField';\nimport { Layout } from '../../../components/Layout';\nimport { usePostQuery, useUpdatePostMutation } from '../../../generated/graphql';\nimport { createUrqlClient } from '../../../utils/createUrqlClient';\nimport { useGetIntId } from '../../../utils/useGetIntId';\nexport var EditPost = function EditPost(_ref) {\n  _s();\n\n  _objectDestructuringEmpty(_ref);\n\n  var router = useRouter();\n  var intId = useGetIntId();\n\n  var _usePostQuery = usePostQuery({\n    pause: intId === -1,\n    variables: {\n      id: intId\n    }\n  }),\n      _usePostQuery2 = _slicedToArray(_usePostQuery, 1),\n      _usePostQuery2$ = _usePostQuery2[0],\n      data = _usePostQuery2$.data,\n      fetching = _usePostQuery2$.fetching;\n\n  var _useUpdatePostMutatio = useUpdatePostMutation(),\n      _useUpdatePostMutatio2 = _slicedToArray(_useUpdatePostMutatio, 2),\n      updatePost = _useUpdatePostMutatio2[1];\n\n  if (fetching) {\n    return __jsx(Layout, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }, \"loading...\"));\n  }\n\n  if (!(data === null || data === void 0 ? void 0 : data.post)) {\n    return __jsx(Layout, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }\n    }, __jsx(Box, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }\n    }, \"could not find post\"));\n  }\n\n  return __jsx(Layout, {\n    variant: \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, __jsx(Formik, {\n    initialValues: {\n      title: data.post.title,\n      text: data.post.text\n    },\n    onSubmit: /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref2) {\n        var setErrors;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setErrors = _ref2.setErrors;\n                _context.next = 3;\n                return updatePost(_objectSpread({\n                  id: intId\n                }, values));\n\n              case 3:\n                router.push('/');\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, function (_ref4) {\n    var isSubmitting = _ref4.isSubmitting;\n    return __jsx(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }, __jsx(InputField, {\n      name: \"title\",\n      placeholder: \"title\",\n      label: \"Title\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }), __jsx(Box, {\n      mt: 4,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }, __jsx(InputField, {\n      textarea: true,\n      name: \"text\",\n      placeholder: \"text\",\n      label: \"Body\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 15\n      }\n    })), __jsx(Button, {\n      type: \"submit\",\n      variantColor: \"teal\",\n      mt: \"4\",\n      isLoading: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    }, \"edit post\"));\n  }));\n};\n\n_s(EditPost, \"U9u1e7FsFda5Pj2GTxrJXrOskDw=\", false, function () {\n  return [useRouter, useGetIntId, usePostQuery, useUpdatePostMutation];\n});\n\n_c = EditPost;\nexport default withUrqlClient(createUrqlClient)(EditPost);\n\nvar _c;\n\n$RefreshReg$(_c, \"EditPost\");","map":{"version":3,"sources":["/home/facundo/code/reddit/web/src/pages/post/edit/[id].tsx"],"names":["Box","Button","Form","Formik","withUrqlClient","useRouter","React","InputField","Layout","usePostQuery","useUpdatePostMutation","createUrqlClient","useGetIntId","EditPost","router","intId","pause","variables","id","data","fetching","updatePost","post","title","text","values","setErrors","push","isSubmitting"],"mappings":"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","sourcesContent":["import { Box, Button } from '@chakra-ui/core';\nimport { Form, Formik } from 'formik';\nimport { withUrqlClient } from 'next-urql';\nimport { useRouter } from 'next/router';\nimport React from 'react';\nimport { InputField } from '../../../components/InputField';\nimport { Layout } from '../../../components/Layout';\nimport {\n  usePostQuery,\n  useUpdatePostMutation,\n} from '../../../generated/graphql';\nimport { createUrqlClient } from '../../../utils/createUrqlClient';\nimport { useGetIntId } from '../../../utils/useGetIntId';\n\nexport const EditPost: React.FC<{}> = ({}) => {\n  const router = useRouter();\n  const intId = useGetIntId();\n  const [{ data, fetching }] = usePostQuery({\n    pause: intId === -1,\n    variables: {\n      id: intId,\n    },\n  });\n  const [, updatePost] = useUpdatePostMutation();\n\n  if (fetching) {\n    return (\n      <Layout>\n        <div>loading...</div>\n      </Layout>\n    );\n  }\n\n  if (!data?.post) {\n    return (\n      <Layout>\n        <Box>could not find post</Box>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout variant=\"small\">\n      <Formik\n        initialValues={{ title: data.post.title, text: data.post.text }}\n        onSubmit={async (values, { setErrors }) => {\n          // const { error } = await createPost({ input: values });\n          // if (!error) {\n          //   router.push('/');\n          // }\n          await updatePost({ id: intId, ...values });\n          router.push('/');\n        }}>\n        {({ isSubmitting }) => (\n          <Form>\n            <InputField name=\"title\" placeholder=\"title\" label=\"Title\" />\n            <Box mt={4}>\n              <InputField\n                textarea\n                name=\"text\"\n                placeholder=\"text\"\n                label=\"Body\"\n              />\n            </Box>\n            <Button\n              type=\"submit\"\n              variantColor=\"teal\"\n              mt=\"4\"\n              isLoading={isSubmitting}>\n              edit post\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Layout>\n  );\n};\n\nexport default withUrqlClient(createUrqlClient)(EditPost);\n"]},"metadata":{},"sourceType":"module"}